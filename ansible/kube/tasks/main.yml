---
- name: Set fact for target user
  set_fact:
    kube_user: "{{ ansible_user }}"
    kube_home: "/home/{{ ansible_user }}"
  when: ansible_user != 'root'

- name: Update and upgrade apt packages
  apt:
    update_cache: yes
    upgrade: dist

- name: Install required packages
  apt:
    name:
      - bash-completion
      - wget
      - vim
      - python3
      - curl
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg
      - lsb-release
    state: present

- name: Disable swap temporarily
  command: swapoff -a

- name: Disable swap permanently
  replace:
    path: /etc/fstab
    regexp: '^([^#].* swap .*)$'
    replace: '# \1'

- name: Install containerd
  apt:
    name: containerd
    state: present

- name: Create containerd config dir
  file:
    path: /etc/containerd
    state: directory

- name: Generate default containerd config
  shell: containerd config default > /etc/containerd/config.toml
  args:
    creates: /etc/containerd/config.toml

- name: Restart containerd
  systemd:
    name: containerd
    state: restarted
    enabled: yes

- name: Add Kubernetes APT key
  shell: |
    mkdir -p /usr/share/keyrings
    curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.30/deb/Release.key | gpg --dearmor -o /usr/share/keyrings/kubernetes-archive-keyring.gpg
  args:
    creates: /usr/share/keyrings/kubernetes-archive-keyring.gpg

- name: Add Kubernetes repository
  copy:
    dest: /etc/apt/sources.list.d/kubernetes.list
    content: |
      deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.30/deb/ /

- name: Update apt cache after repo add
  apt:
    update_cache: yes

- name: Install Kubernetes packages
  apt:
    name:
      - kubelet
      - kubeadm
      - kubectl
    state: present

- name: Hold Kubernetes packages
  shell: apt-mark hold kubelet kubeadm kubectl

- name: Load kernel modules
  copy:
    dest: /etc/modules-load.d/k8s.conf
    content: |
      overlay
      br_netfilter

- name: Enable overlay module
  modprobe:
    name: overlay
    state: present

- name: Enable br_netfilter module
  modprobe:
    name: br_netfilter
    state: present

- name: Configure sysctl for Kubernetes
  copy:
    dest: /etc/sysctl.d/k8s.conf
    content: |
      net.bridge.bridge-nf-call-iptables  = 1
      net.ipv4.ip_forward                 = 1
      net.bridge.bridge-nf-call-ip6tables = 1

- name: Apply sysctl settings
  command: sysctl --system

- name: Initialize Kubernetes cluster
  command: kubeadm init --pod-network-cidr=10.244.0.0/16
  register: kubeadm_init
  args:
    creates: /etc/kubernetes/admin.conf

- name: Create .kube directory for user
  file:
    path: "{{ kube_home }}/.kube"
    state: directory
    owner: "{{ kube_user }}"
    group: "{{ kube_user }}"
    mode: '0755'

- name: Copy admin.conf to user's kube config
  copy:
    src: /etc/kubernetes/admin.conf
    dest: "{{ kube_home }}/.kube/config"
    remote_src: yes
    owner: "{{ kube_user }}"
    group: "{{ kube_user }}"
    mode: '0644'

- name: Attente de 30 secondes
  ansible.builtin.pause:
    seconds: 30

- name: Install Flannel network plugin
  shell: kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf

- name: Wait for the node to be Ready
  shell: |
    kubectl get nodes --no-headers | grep -q ' Ready '
  register: node_ready
  retries: 10
  delay: 15
  until: node_ready.rc == 0
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf

- name: Show node status
  shell: kubectl get nodes
  register: nodes_output
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf

- name: Print node status
  debug:
    var: nodes_output.stdout
